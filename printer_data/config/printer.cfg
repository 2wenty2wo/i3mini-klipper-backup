# This file contains pin mappings for the Wanhao Duplicator i3 mini.
# (circa 2017) To use this config, the firmware should be compiled
# for the AVR atmega2560.
# Pin numbers and other parameters were extracted from the official
# Marlin source available at: https://github.com/garychen99/i3Mini

# See docs/Config_Reference.md for a description of parameters.

[include mainsail.cfg]
[include KAMP_Settings.cfg]

[stepper_x]
step_pin: PA0
dir_pin: !PA1
enable_pin: !PF3
microsteps: 16
rotation_distance: 40
endstop_pin: ^!PD2
position_endstop: 120
position_max: 120
homing_speed: 30.0

[stepper_y]
step_pin: PA3
dir_pin: PA4
enable_pin: !PA2
microsteps: 16
rotation_distance: 40
endstop_pin: ^!PD3
position_endstop: 0
position_max: 135
homing_speed: 30.0

[stepper_z]
step_pin: PA7
dir_pin: PG2
enable_pin: !PA6
microsteps: 16
rotation_distance: 8
endstop_pin: probe:z_virtual_endstop   # <â€” MUST be this
position_min: -2
position_max: 100

[extruder]
step_pin: PF1
dir_pin: PF2
enable_pin: !PF0
microsteps: 16
rotation_distance: 6.329
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PG5
sensor_type: NTC 100K MGB18-104F39050L32
sensor_pin: PK5
control: pid
pid_Kp: 22.2
pid_Ki: 1.08
pid_Kd: 114
min_temp: 1
max_temp: 265
max_extrude_cross_section: 5

[fan]
pin: PB6

[mcu]
serial: /dev/serial/by-id/usb-1a86_USB2.0-Serial-if00-port0

[mcu rpi]
serial: /tmp/klipper_host_mcu

[printer]
kinematics: cartesian
max_velocity: 300
max_accel: 3000
max_z_velocity: 5
max_z_accel: 100

[display]
lcd_type: uc1701
cs_pin: PG0
a0_pin: PG1
rst_pin: PA5
click_pin: ^!PE3
encoder_pins: ^PE5, ^PE4
kill_pin: ^!PK2
contrast: 60

[bltouch]
sensor_pin: ^PD7
control_pin: rpi:gpio17
x_offset: 0.0
y_offset: -37.5
#z_offset: 3.850
probe_with_touch_mode: False
pin_up_reports_not_triggered: True
pin_up_touch_mode_reports_triggered: False
pin_move_time: 0.50

# --- Probe-safe mesh limits (PROBE coordinates) ---
[bed_mesh]
speed: 120
horizontal_move_z: 5
mesh_min: 5, 5          # PROBE coords (front/left)
mesh_max: 115, 97.5     # PROBE coords (back/right) -> keeps nozzle â‰¤ Y135
probe_count: 5,5
algorithm: bicubic

[screws_tilt_adjust]
# NOZZLE coordinates chosen so the PROBE lands safely within your mesh
#   probe_y = nozzle_y + (-37.5)
#   front row:  nozzle_y â‰ˆ 45  -> probe_y â‰ˆ 7.5  (inside your min 5)
#   back row:   nozzle_y â‰ˆ 130 -> probe_y â‰ˆ 92.5 (inside your max 97.5)
screw1: 15, 45      # front-left
screw2: 110, 45     # front-right
screw3: 110, 130    # back-right
screw4: 15, 130     # back-left
horizontal_move_z: 10
speed: 100
screw_thread: CW-M3   # If directions feel backwards, change to CCW-M3

[gcode_macro LEVEL_BED]
description: ðŸ”§ Probe 4 corners for screw adjust
gcode:
  G28
  SCREWS_TILT_CALCULATE

# ============================================================
# KAMP "K1C-style" SWITCHES (Wanhao Duplicator i3 Mini / Klipper)
# ------------------------------------------------------------
# This recreates the K1C helper UI:
#   - Real toggles in Mainsail's "Fans & Outputs" card
#   - Your START_PRINT reads these and runs the right KAMP features
#   - Adaptive Mesh <-> Full Mesh are mutually exclusive (like K1C)
#
# HOW IT WORKS
# 1) We expose four "software switches" as [output_pin] so Mainsail
#    renders them as ON/OFF toggles:
#       - KAMP master enable
#       - ADAPTIVE BED MESH
#       - FULL BED MESH
#       - ADAPTIVE PURGE LINE
#    These pins are on the *Raspberry Pi MCU* and must NOT be wired
#    to anything. They are just flags you flip from the UI.
#
# 2) _KAMP_APPLY_AT_START reads those flags and calls:
#       ADAPTIVE_BED_MESH (KAMP)
#       or BED_MESH_CALIBRATE (full mesh)
#       and optionally LINE_PURGE
#
# 3) We provide ON/OFF/TOGGLE macros so you can bind them to buttons
#    or favorites (optionalâ€”UI toggles are enough).
#
# SAFETY
# - Choose unused Raspberry Pi GPIOs. If you picked different ones,
#   update the "pin:" lines below. DO NOT connect anything to them.
# - If you ever get "Unknown command: ADAPTIVE_BED_MESH" check that
#   your KAMP includes load correctly.
# ============================================================

# -------------#
# UI SWITCHES  #
# -------------#
# NOTE: These are "dummy" output pins on the Raspberry Pi. They act as
# software flags so Mainsail shows proper toggles. Nothing is connected.

[output_pin KAMP]                        # Master KAMP enable/disable
pin: rpi:gpiochip0/gpio21                # <-- pick any unused Pi GPIO
value: 1                                 # default ON so KAMP runs by default
shutdown_value: 0

[output_pin ADAPTIVE_BED_MESH]           # Use KAMP adaptive meshing
pin: rpi:gpiochip0/gpio22
value: 1                                 # default ON (mimics K1C helper defaults)
shutdown_value: 0

[output_pin FULL_BED_MESH]               # Use standard full mesh (exclusive with adaptive)
pin: rpi:gpiochip0/gpio23
value: 0
shutdown_value: 0

[output_pin ADAPTIVE_PURGE_LINE]         # Use KAMP line purge
pin: rpi:gpiochip0/gpio24
value: 1                                 # default ON
shutdown_value: 0


# -----------------------------------------#
# OPTIONAL BUTTON MACROS (for Favorites UI)#
# -----------------------------------------#
# These let you click buttons to set the switches without opening the
# "Fans & Outputs" sliders. They also enforce mutual exclusivity.

[gcode_macro KAMP_ON]
description: Enable KAMP master switch (equivalent to turning the toggle ON)
gcode:
  SET_PIN PIN=KAMP VALUE=1
  RESPOND MSG="KAMP: ENABLED"

[gcode_macro KAMP_OFF]
description: Disable KAMP master switch
gcode:
  SET_PIN PIN=KAMP VALUE=0
  RESPOND MSG="KAMP: DISABLED"

[gcode_macro KAMP_TOGGLE]
description: Toggle KAMP master switch
gcode:
  {% set v = printer["output_pin KAMP"].value|int %}
  SET_PIN PIN=KAMP VALUE={ 0 if v else 1 }
  RESPOND MSG="KAMP: { 'DISABLED' if v else 'ENABLED' }"

# Adaptive mesh ON forces Full mesh OFF
[gcode_macro ADAPTIVE_BED_MESH_ON]
description: Turn ON Adaptive Mesh and turn OFF Full Mesh
gcode:
  SET_PIN PIN=ADAPTIVE_BED_MESH VALUE=1
  SET_PIN PIN=FULL_BED_MESH VALUE=0
  RESPOND MSG="KAMP Mesh: ADAPTIVE"

[gcode_macro ADAPTIVE_BED_MESH_OFF]
description: Turn OFF Adaptive Mesh
gcode:
  SET_PIN PIN=ADAPTIVE_BED_MESH VALUE=0
  RESPOND MSG="KAMP Mesh: ADAPTIVE OFF"

[gcode_macro ADAPTIVE_BED_MESH_TOGGLE]
description: Toggle Adaptive Mesh (and disable Full Mesh when turning ON)
gcode:
  {% set a = printer["output_pin ADAPTIVE_BED_MESH"].value|int %}
  {% set newa = 0 if a else 1 %}
  SET_PIN PIN=ADAPTIVE_BED_MESH VALUE={ newa }
  {% if newa == 1 %}
    SET_PIN PIN=FULL_BED_MESH VALUE=0
  {% endif %}
  RESPOND MSG="KAMP Mesh: { 'ADAPTIVE OFF' if a else 'ADAPTIVE' }"

# Full mesh ON forces Adaptive OFF
[gcode_macro FULL_BED_MESH_ON]
description: Turn ON Full Mesh and turn OFF Adaptive Mesh
gcode:
  SET_PIN PIN=FULL_BED_MESH VALUE=1
  SET_PIN PIN=ADAPTIVE_BED_MESH VALUE=0
  RESPOND MSG="KAMP Mesh: FULL"

[gcode_macro FULL_BED_MESH_OFF]
description: Turn OFF Full Mesh
gcode:
  SET_PIN PIN=FULL_BED_MESH VALUE=0
  RESPOND MSG="KAMP Mesh: FULL OFF"

[gcode_macro FULL_BED_MESH_TOGGLE]
description: Toggle Full Mesh (and disable Adaptive when turning ON)
gcode:
  {% set f = printer["output_pin FULL_BED_MESH"].value|int %}
  {% set newf = 0 if f else 1 %}
  SET_PIN PIN=FULL_BED_MESH VALUE={ newf }
  {% if newf == 1 %}
    SET_PIN PIN=ADAPTIVE_BED_MESH VALUE=0
  {% endif %}
  RESPOND MSG="KAMP Mesh: { 'FULL OFF' if f else 'FULL' }"

[gcode_macro ADAPTIVE_PURGE_LINE_ON]
description: Enable KAMP Adaptive Line Purge
gcode:
  SET_PIN PIN=ADAPTIVE_PURGE_LINE VALUE=1
  RESPOND MSG="KAMP Purge: ON"

[gcode_macro ADAPTIVE_PURGE_LINE_OFF]
description: Disable KAMP Adaptive Line Purge
gcode:
  SET_PIN PIN=ADAPTIVE_PURGE_LINE VALUE=0
  RESPOND MSG="KAMP Purge: OFF"

[gcode_macro ADAPTIVE_PURGE_LINE_TOGGLE]
description: Toggle KAMP Adaptive Line Purge
gcode:
  {% set p = printer["output_pin ADAPTIVE_PURGE_LINE"].value|int %}
  SET_PIN PIN=ADAPTIVE_PURGE_LINE VALUE={ 0 if p else 1 }
  RESPOND MSG="KAMP Purge: { 'OFF' if p else 'ON' }"


# ------------------------------------------------------#
# APPLY SELECTED KAMP FEATURES DURING START OF THE PRINT#
# ------------------------------------------------------#
[gcode_macro _KAMP_APPLY_AT_START]
description: Read the UI switches and apply the chosen KAMP actions
gcode:
  {% set kamp   = printer["output_pin KAMP"].value|int %}
  {% set adapt  = printer["output_pin ADAPTIVE_BED_MESH"].value|int %}
  {% set full   = printer["output_pin FULL_BED_MESH"].value|int %}
  {% set purge  = printer["output_pin ADAPTIVE_PURGE_LINE"].value|int %}

  {% if kamp == 1 %}
    {% if adapt == 1 %}
      # Use KAMP's adaptive mesh
      ADAPTIVE_BED_MESH
    {% elif full == 1 %}
      # Use standard full mesh
      BED_MESH_CALIBRATE
      BED_MESH_PROFILE SAVE=last_print
    {% else %}
      RESPOND MSG="KAMP: Mesh skipped (both mesh switches off)"
    {% endif %}

    {% if purge == 1 %}
      LINE_PURGE
    {% endif %}
  {% else %}
    RESPOND MSG="KAMP: Disabled â€” skipping mesh & purge"
  {% endif %}

# Nice boot banner showing current switch states (for sanity)
[delayed_gcode _KAMP_BOOT_NOTE]
initial_duration: 2.0
gcode:
  {% set kamp  = printer["output_pin KAMP"].value|int %}
  {% set adapt = printer["output_pin ADAPTIVE_BED_MESH"].value|int %}
  {% set full  = printer["output_pin FULL_BED_MESH"].value|int %}
  {% set purge = printer["output_pin ADAPTIVE_PURGE_LINE"].value|int %}
  RESPOND MSG="KAMP boot â†’ enabled={kamp} adaptive={adapt} full={full} purge={purge}"

[firmware_retraction]
retract_length: 1.0
retract_speed: 25
unretract_extra_length: 0
unretract_speed: 25

[adxl345]
cs_pin: rpi:None

[resonance_tester]
accel_chip: adxl345
probe_points:
    100,100,20

[gcode_macro ADXL_SANITY]
description: Check accelerometer is responding and noise is reasonable
gcode:
  RESPOND PREFIX=ADXL MSG="Querying accelerometerâ€¦"
  ACCELEROMETER_QUERY
  MEASURE_AXES_NOISE

[gcode_macro RESO_TUNE]
description: Home, warm nozzle, run SHAPER_CALIBRATE on X/Y, then prompt to SAVE_CONFIG
variable_temp: 200
gcode:
  {% set t = params.TEMP|default(printer["gcode_macro RESO_TUNE"].temp)|int %}
  M117 Resonance tune startingâ€¦
  {% if printer.toolhead.homed_axes != "xyz" %}
    G28
  {% endif %}
  M104 S{t}
  M109 S{t}
  G90
  # Move to center-ish and lift
  {% set x = printer.toolhead.axis_maximum.x / 2 %}
  {% set y = printer.toolhead.axis_maximum.y / 2 %}
  G1 X{ x|round(1) } Y{ y|round(1) } Z20 F6000
  MEASURE_AXES_NOISE
  SHAPER_CALIBRATE
  M117 Review console output; run SAVE_CONFIG if happy

[gcode_macro PARK]
description: Lift and park front-right
gcode:
  {% if printer.toolhead.homed_axes != "xyz" %}
    G28
  {% endif %}
  G90
  G1 Z20 F6000
  G1 X{printer.toolhead.axis_maximum.x - 5} Y{printer.toolhead.axis_maximum.y - 5} F9000

[safe_z_home]
home_xy_position: 60,104.5
z_hop: 5
z_hop_speed: 5

# ===== START / END for i3 Mini + KAMP Line Purge =====

# [gcode_macro START_PRINT]
# description: Heat nozzle, home, then KAMP line purge (no heated bed)
# variable_do_purge: 1
# gcode:
  # {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(200)|int %}
  # G21
  # G90
  # M82
  # M107

  # M104 S{EXTRUDER_TEMP}
  # G28
  # M109 S{EXTRUDER_TEMP}

  # {% if printer["gcode_macro START_PRINT"].do_purge|int == 1 %}
    # ; gentle motion so the extruder never clicks during purge
    # {% set ov = printer.toolhead.max_velocity %}
    # {% set oa = printer.toolhead.max_accel %}
    # SET_VELOCITY_LIMIT VELOCITY=150 ACCEL=1000

    # LINE_PURGE

    # ; --- wipe & slow re-prime to avoid dingleberry and dry start ---
    # {% set ph = (printer["gcode_macro _KAMP_Settings"].purge_height|default(0.30))|float %}
    # G92 E0
    # G1 E-0.6 F1800              ; tiny retract to snap the string
    # G1 Z{ph + 0.3} F600         ; lift a touch above purge height
    # G1 X5 Y5 F6000              ; wipe to front-left corner (inside 120x135 area)
    # G1 Z{ph} F600               ; back to purge-layer height
    # G1 E1.0 F150                ; slow prime so first move has pressure
    # G92 E0

    # SET_VELOCITY_LIMIT VELOCITY={ov} ACCEL={oa}
  # {% endif %}

  # M117 Printingâ€¦

# ===== START for i3 Mini + KAMP Adaptive Mesh + Line Purge =====
[gcode_macro START_PRINT]
description: Heat, home, then run KAMP (based on switches), then print
gcode:
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(200)|int %}

  G21
  G90
  M82
  M107

  M104 S{EXTRUDER_TEMP}        ; start heating
  G28                          ; home (BLTouch + safe_z_home)
  M109 S{EXTRUDER_TEMP}        ; wait for nozzle

  ; === Run KAMP switches like K1C ===
  _KAMP_APPLY_AT_START

  M117 Printingâ€¦

[gcode_macro END_PRINT]
description: Cooldown and park
gcode:
  M107
  M104 S0
  G91
  G1 E-1 F1800
  G1 Z10 F600
  G90
  G1 X115 Y130 F9000
  M84

# ---------------------------
# SAFE PARK & PRINT LIFECYCLE (fixed)
# ---------------------------

[gcode_macro _SAFE_PARK]
description: Lift Z and park back-right safely (fits 120x135 bed)
variable_park_z: 10
gcode:
  {% set parkz = params.Z|default(printer["gcode_macro _SAFE_PARK"].park_z)|int %}
  {% set xmax = printer.configfile.config.stepper_x.position_max|default(120)|int %}
  {% set ymax = printer.configfile.config.stepper_y.position_max|default(135)|int %}
  {% set lift = parkz if parkz > 2 else 2 %}
  SAVE_GCODE_STATE NAME=__park
  G91
  G1 Z{lift} F600
  G90
  G1 X{ x_max|default(xmax) - 5 } Y{ y_max|default(ymax) - 5 } F6000
  RESTORE_GCODE_STATE NAME=__park

[gcode_macro PAUSE]
description: Pause with park and fan/heater handling
rename_existing: BASE_PAUSE
gcode:
  {% set fan = printer.fan.speed|default(0) %}
  {% set keep_hot = params.KEEP_HOT|default(1)|int %}
  BASE_PAUSE
  _SAFE_PARK Z=10
  M106 S0                          ; turn off part-cooling fan
  {% if not keep_hot %} M104 S0 {% endif %}

[gcode_macro RESUME]
description: Resume and restore state
rename_existing: BASE_RESUME
gcode:
  BASE_RESUME

[gcode_macro CANCEL_PRINT]
description: Cancel with safe retract (independent of M82/M83), cool-down, and park
rename_existing: BASE_CANCEL_PRINT
gcode:
  SAVE_GCODE_STATE NAME=__cancel
  ; Make extruder relative temporarily so retract is always sane
  M83
  G1 E-2 F1800
  ; Restore parser state (including user's E absolute/relative mode)
  RESTORE_GCODE_STATE NAME=__cancel

  _SAFE_PARK Z=15
  M106 S0
  M104 S0
  CLEAR_PAUSE
  SDCARD_RESET_FILE
  BASE_CANCEL_PRINT

[exclude_object]

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [bltouch]
#*# z_offset = 2.160
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	-0.150000, 0.020000, 0.027500, 0.017500, -0.092500
#*# 	-0.152500, 0.017500, 0.007500, -0.027500, -0.077500
#*# 	-0.225000, 0.007500, -0.005000, -0.027500, -0.122500
#*# 	-0.280000, -0.070000, -0.020000, -0.020000, -0.125000
#*# 	-0.260000, -0.052500, 0.000000, -0.047500, -0.092500
#*# x_count = 5
#*# y_count = 5
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = lagrange
#*# tension = 0.2
#*# min_x = 5.0
#*# max_x = 115.0
#*# min_y = 5.0
#*# max_y = 97.48
#*#
#*# [input_shaper]
#*# shaper_type_x = mzv
#*# shaper_freq_x = 61.4
#*# shaper_type_y = ei
#*# shaper_freq_y = 98.0
