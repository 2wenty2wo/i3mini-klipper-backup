# This file contains pin mappings for the Wanhao Duplicator i3 mini.
# (circa 2017) To use this config, the firmware should be compiled
# for the AVR atmega2560.
# Pin numbers and other parameters were extracted from the official
# Marlin source available at: https://github.com/garychen99/i3Mini

# See docs/Config_Reference.md for a description of parameters.

[include mainsail.cfg]
[include KAMP_Settings.cfg]

[stepper_x]
step_pin: PA0
dir_pin: !PA1
enable_pin: !PF3
microsteps: 16
rotation_distance: 40
endstop_pin: ^!PD2
position_endstop: 120
position_max: 120
homing_speed: 30.0

[stepper_y]
step_pin: PA3
dir_pin: PA4
enable_pin: !PA2
microsteps: 16
rotation_distance: 40
endstop_pin: ^!PD3
position_endstop: 0
position_max: 135
homing_speed: 30.0

[stepper_z]
step_pin: PA7
dir_pin: PG2
enable_pin: !PA6
microsteps: 16
rotation_distance: 8
endstop_pin: probe:z_virtual_endstop   # <â€” MUST be this
position_min: -2
position_max: 100

[extruder]
step_pin: PF1
dir_pin: PF2
enable_pin: !PF0
microsteps: 16
rotation_distance: 6.329
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PG5
sensor_type: NTC 100K MGB18-104F39050L32
sensor_pin: PK5
control: pid
pid_Kp: 22.2
pid_Ki: 1.08
pid_Kd: 114
min_temp: 1
max_temp: 265
max_extrude_cross_section: 5

[fan]
pin: PB6

[mcu]
serial: /dev/serial/by-id/usb-1a86_USB2.0-Serial-if00-port0

[mcu rpi]
serial: /tmp/klipper_host_mcu

[printer]
kinematics: cartesian
max_velocity: 300
max_accel: 3000
max_z_velocity: 8
max_z_accel: 120
square_corner_velocity: 2.0

[display]
lcd_type: uc1701
cs_pin: PG0
a0_pin: PG1
rst_pin: PA5
click_pin: ^!PE3
encoder_pins: ^PE5, ^PE4
kill_pin: ^!PK2
contrast: 60

[bltouch]
sensor_pin: ^PD7
control_pin: rpi:gpio17
x_offset: 0.0
y_offset: -37.5
#z_offset: 3.850
probe_with_touch_mode: False
pin_up_reports_not_triggered: True
pin_up_touch_mode_reports_triggered: False
pin_move_time: 0.50

# --- Probe-safe mesh limits (PROBE coordinates) ---
[bed_mesh]
speed: 120
horizontal_move_z: 5
mesh_min: 5, 5          # PROBE coords (front/left)
mesh_max: 115, 97.5     # PROBE coords (back/right) -> keeps nozzle â‰¤ Y135
probe_count: 5,5
algorithm: bicubic

[screws_tilt_adjust]
# NOZZLE coordinates chosen so the PROBE lands safely within your mesh
#   probe_y = nozzle_y + (-37.5)
#   front row:  nozzle_y â‰ˆ 45  -> probe_y â‰ˆ 7.5  (inside your min 5)
#   back row:   nozzle_y â‰ˆ 130 -> probe_y â‰ˆ 92.5 (inside your max 97.5)
screw1: 15, 45      # front-left
screw2: 110, 45     # front-right
screw3: 110, 130    # back-right
screw4: 15, 130     # back-left
horizontal_move_z: 10
speed: 100
screw_thread: CW-M3   # If directions feel backwards, change to CCW-M3

[gcode_macro LEVEL_BED]
description: ðŸ”§ Probe 4 corners for screw adjust
gcode:
  G28
  SCREWS_TILT_CALCULATE

# --- KAMP toggles that match your current macros ---
[gcode_macro KAMP_ON]
gcode:
  SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=do_purge VALUE=1
  RESPOND PREFIX=KAMP MSG="Line purge ENABLED. (No change to homing/mesh.)"

[gcode_macro KAMP_OFF]
gcode:
  SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=do_purge VALUE=0
  RESPOND PREFIX=KAMP MSG="Line purge DISABLED. (No change to homing/mesh.)"

[firmware_retraction]
retract_length: 1.0
retract_speed: 25
unretract_extra_length: 0
unretract_speed: 25

[adxl345]
cs_pin: rpi:None

[resonance_tester]
accel_chip: adxl345
probe_points:
    100,100,20

[gcode_macro ADXL_SANITY]
description: Check accelerometer is responding and noise is reasonable
gcode:
  RESPOND PREFIX=ADXL MSG="Querying accelerometerâ€¦"
  ACCELEROMETER_QUERY
  MEASURE_AXES_NOISE

[gcode_macro RESO_TUNE]
description: Home, warm nozzle, run SHAPER_CALIBRATE on X/Y, then prompt to SAVE_CONFIG
variable_temp: 200
gcode:
  {% set t = params.TEMP|default(printer["gcode_macro RESO_TUNE"].temp)|int %}
  M117 Resonance tune startingâ€¦
  {% if printer.toolhead.homed_axes != "xyz" %}
    G28
  {% endif %}
  M104 S{t}
  M109 S{t}
  G90
  # Move to center-ish and lift
  {% set x = printer.toolhead.axis_maximum.x / 2 %}
  {% set y = printer.toolhead.axis_maximum.y / 2 %}
  G1 X{ x|round(1) } Y{ y|round(1) } Z20 F6000
  MEASURE_AXES_NOISE
  SHAPER_CALIBRATE
  M117 Review console output; run SAVE_CONFIG if happy

[gcode_macro PARK]
description: Lift and park front-right
gcode:
  {% if printer.toolhead.homed_axes != "xyz" %}
    G28
  {% endif %}
  G90
  G1 Z20 F6000
  G1 X{printer.toolhead.axis_maximum.x - 5} Y{printer.toolhead.axis_maximum.y - 5} F9000

[safe_z_home]
home_xy_position: 60,104.5
z_hop: 5
z_hop_speed: 5

# ===== START for i3 Mini + KAMP Adaptive Mesh + Line Purge =====
[gcode_macro START_PRINT]
description: Heat, home, KAMP adaptive mesh (via BED_MESH_CALIBRATE), Smart Park, then optional Line Purge
# Flip these at runtime if you want:
#   SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=do_mesh VALUE=0/1
#   SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=do_purge VALUE=0/1
variable_do_mesh: 1
variable_do_purge: 1
gcode:
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(200)|int %}

  ; --- sane states ---
  G21
  G90
  M82
  M107

  ; --- start warming but don't wait yet ---
  M104 S{EXTRUDER_TEMP}

  ; --- home first (BLTouch + safe_z_home) ---
  G28

  ; --- KAMP adaptive mesh (KAMP overrides BED_MESH_CALIBRATE) ---
  {% if printer["gcode_macro START_PRINT"].do_mesh|int == 1 %}
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE         ; KAMP computes adapted area from exclude_object
  {% endif %}

  ; --- park near print area while finishing heat (from KAMP Smart_Park) ---
  SMART_PARK

  ; --- now finish heating and wait ---
  M109 S{EXTRUDER_TEMP}

  ; --- optional KAMP line purge ---
  {% if printer["gcode_macro START_PRINT"].do_purge|int == 1 %}
    LINE_PURGE

    ; tidy up so first move starts pressurized without a booger
    {% set ph = (printer["gcode_macro _KAMP_Settings"].purge_height|default(0.30))|float %}
    G92 E0
    G1 E-0.6 F1800
    G1 Z{ph + 0.3} F600
    G1 X5 Y5 F6000
    G1 Z{ph} F600
    G1 E1.0 F150
    G92 E0
  {% endif %}

  M117 Printingâ€¦

# ---------------------------
# END_PRINT: cool + safe park
# ---------------------------
[gcode_macro END_PRINT]
description: Cooldown and park (top-right + bed forward) with Z clamped below max
gcode:
  M107
  M104 S0
  G91
  G1 E-1 F1800
  G90
  _PARK_TR_SAFE
  M84

# ---------------------------
# SAFE PARK & PRINT LIFECYCLE (fixed)
# ---------------------------

[gcode_macro _SAFE_PARK]
description: Lift Z and park back-right safely (fits 120x135 bed)
variable_park_z: 10
gcode:
  {% set parkz = params.Z|default(printer["gcode_macro _SAFE_PARK"].park_z)|int %}
  {% set xmax = printer.configfile.config.stepper_x.position_max|default(120)|int %}
  {% set ymax = printer.configfile.config.stepper_y.position_max|default(135)|int %}
  {% set lift = parkz if parkz > 2 else 2 %}
  SAVE_GCODE_STATE NAME=__park
  G91
  G1 Z{lift} F600
  G90
  G1 X{ x_max|default(xmax) - 5 } Y{ y_max|default(ymax) - 5 } F6000
  RESTORE_GCODE_STATE NAME=__park

# ---------------------------
# PARK: Safe full-clear (top-right + bed forward)
# ---------------------------
[gcode_macro _PARK_TR_SAFE]
description: Clamp-safe park: Z to (Zmax-0.5), X/Y to (max - margins), bed comes forward on bedslinger
variable_x_margin: 2.0
variable_y_margin: 2.0
variable_z_margin: 0.5
gcode:
  # Limits from config
  {% set x_max = (printer.configfile.config.stepper_x.position_max|default(120))|float %}
  {% set y_max = (printer.configfile.config.stepper_y.position_max|default(135))|float %}
  {% set z_max = (printer.configfile.config.stepper_z.position_max|default(100))|float %}

  # Margins (allow override: _PARK_TR_SAFE X_MARGIN=2 Y_MARGIN=2 Z_MARGIN=0.5)
  {% set xm = (params.X_MARGIN|default(printer["gcode_macro _PARK_TR_SAFE"].x_margin))|float %}
  {% set ym = (params.Y_MARGIN|default(printer["gcode_macro _PARK_TR_SAFE"].y_margin))|float %}
  {% set zm = (params.Z_MARGIN|default(printer["gcode_macro _PARK_TR_SAFE"].z_margin))|float %}

  {% set z_now = printer.toolhead.position.z|float %}
  {% set z_target = (z_max - zm) if (z_max - zm) > z_now else (z_now) %}

  G90
  ; Z first to avoid grazing the print (Klipper clamps speed to max_z_velocity)
  G1 Z{ z_target|round(3) } F18000

  ; Right edge with small margin
  G1 X{ (x_max - xm)|round(3) } F15000

  ; Bed forward on bedslinger = high Y (small margin)
  G1 Y{ (y_max - ym)|round(3) } F15000

[gcode_macro PAUSE]
description: Pause with park and fan/heater handling
rename_existing: BASE_PAUSE
gcode:
  {% set fan = printer.fan.speed|default(0) %}
  {% set keep_hot = params.KEEP_HOT|default(1)|int %}
  BASE_PAUSE
  _SAFE_PARK Z=10
  M106 S0                          ; turn off part-cooling fan
  {% if not keep_hot %} M104 S0 {% endif %}

[gcode_macro RESUME]
description: Resume and restore state
rename_existing: BASE_RESUME
gcode:
  BASE_RESUME

# ---------------------------
# CANCEL_PRINT: flush queue first, then cool + safe park
# ---------------------------
[gcode_macro CANCEL_PRINT]
description: Cancel with queue flush, retract, cool down, and safe park
rename_existing: BASE_CANCEL_PRINT
gcode:
  ; 1) Stop new file commands & flush planner so nothing "keeps printing"
  M400                      ; wait for planner
  SDCARD_RESET_FILE         ; stop/forget current file
  CLEAR_PAUSE               ; clear any paused state

  ; 2) Make a small guaranteed retract (independent of E mode)
  SAVE_GCODE_STATE NAME=__canc
  M83
  G1 E-2 F1800
  RESTORE_GCODE_STATE NAME=__canc

  ; 3) Cool things down
  M106 S0
  M104 S0

  ; 4) Park safely at the clear location
  _PARK_TR_SAFE

  ; 5) Let Mainsail/Fluidd do their bookkeeping
  BASE_CANCEL_PRINT


[exclude_object]

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [bltouch]
#*# z_offset = 2.160
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	-0.150000, 0.020000, 0.027500, 0.017500, -0.092500
#*# 	-0.152500, 0.017500, 0.007500, -0.027500, -0.077500
#*# 	-0.225000, 0.007500, -0.005000, -0.027500, -0.122500
#*# 	-0.280000, -0.070000, -0.020000, -0.020000, -0.125000
#*# 	-0.260000, -0.052500, 0.000000, -0.047500, -0.092500
#*# x_count = 5
#*# y_count = 5
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = lagrange
#*# tension = 0.2
#*# min_x = 5.0
#*# max_x = 115.0
#*# min_y = 5.0
#*# max_y = 97.48
#*#
#*# [input_shaper]
#*# shaper_type_x = mzv
#*# shaper_freq_x = 61.4
#*# shaper_type_y = ei
#*# shaper_freq_y = 98.0
