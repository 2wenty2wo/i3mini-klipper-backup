# ─────────────────────────────────────────────────────────────────────────────
# PRINT LIFECYCLE: start/end, pause/resume, parking, cancel, KAMP toggles
# START_PRINT calls KAMP's BED_MESH_CALIBRATE and LINE_PURGE when enabled.
# ─────────────────────────────────────────────────────────────────────────────

# Simple KAMP toggles for line purge (mesh toggle is separate var below)
[gcode_macro KAMP_ON]
gcode:
  SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=do_purge VALUE=1
  RESPOND PREFIX=KAMP MSG="Line purge ENABLED. (No change to homing/mesh.)"

[gcode_macro KAMP_OFF]
gcode:
  SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=do_purge VALUE=0
  RESPOND PREFIX=KAMP MSG="Line purge DISABLED. (No change to homing/mesh.)"

# Quick manual park button (front-right)
[gcode_macro PARK]
description: Lift and park front-right
gcode:
  {% if printer.toolhead.homed_axes != "xyz" %} G28 {% endif %}
  G90
  G1 Z20 F6000
  G1 X{printer.toolhead.axis_maximum.x - 5} Y{printer.toolhead.axis_maximum.y - 5} F9000

# Reusable safe park helper (back-right)
[gcode_macro _SAFE_PARK]
description: Lift Z and park back-right safely (fits 120x135 bed)
variable_park_z: 10
gcode:
  {% set parkz = params.Z|default(printer["gcode_macro _SAFE_PARK"].park_z)|int %}
  {% set xmax = printer.configfile.config.stepper_x.position_max|default(120)|int %}
  {% set ymax = printer.configfile.config.stepper_y.position_max|default(135)|int %}
  {% set lift = parkz if parkz > 2 else 2 %}
  SAVE_GCODE_STATE NAME=__park
  G91
  G1 Z{lift} F600
  G90
  G1 X{ x_max|default(xmax) - 5 } Y{ y_max|default(ymax) - 5 } F6000
  RESTORE_GCODE_STATE NAME=__park

# Full-clear safe park (top-right + bed forward)
[gcode_macro _PARK_TR_SAFE]
description: Clamp-safe park: Z to (Zmax-0.5), X/Y to (max - margins), bed forward
variable_x_margin: 2.0
variable_y_margin: 2.0
variable_z_margin: 0.5
gcode:
  {% set x_max = (printer.configfile.config.stepper_x.position_max|default(120))|float %}
  {% set y_max = (printer.configfile.config.stepper_y.position_max|default(135))|float %}
  {% set z_max = (printer.configfile.config.stepper_z.position_max|default(100))|float %}
  {% set xm = (params.X_MARGIN|default(printer["gcode_macro _PARK_TR_SAFE"].x_margin))|float %}
  {% set ym = (params.Y_MARGIN|default(printer["gcode_macro _PARK_TR_SAFE"].y_margin))|float %}
  {% set zm = (params.Z_MARGIN|default(printer["gcode_macro _PARK_TR_SAFE"].z_margin))|float %}
  {% set z_now = printer.toolhead.position.z|float %}
  {% set z_target = (z_max - zm) if (z_max - zm) > z_now else (z_now) %}
  G90
  G1 Z{ z_target|round(3) } F18000
  G1 X{ (x_max - xm)|round(3) } F15000
  G1 Y{ (y_max - ym)|round(3) } F15000

# START_PRINT: cold (or low-temp) probe to prevent oozing, then heat + purge
[gcode_macro START_PRINT]
description: Home → (optional cold/idle) adaptive mesh → Smart Park → heat to temp → optional Line Purge with tidy exit
# ── Runtime toggles (set at any time from console/UI) ─────────────────────────
#   SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=do_mesh VALUE=0/1        ; run adaptive mesh
#   SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=do_purge VALUE=0/1       ; run KAMP Line Purge
#   SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=cold_probe VALUE=0/1     ; 1=cold/idle mesh (prevents ooze)
#   SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=idle_temp VALUE=150      ; nozzle temp during mesh if cold_probe=1 (0 = keep cold)
#
# ── Slicer parameters (fallbacks shown) ─────────────────────────────────────
#   START_PRINT EXTRUDER_TEMP=200
#
variable_do_mesh: 1            # 1=run KAMP adaptive mesh via BED_MESH_CALIBRATE
variable_do_purge: 1           # 1=run LINE_PURGE after heating
variable_cold_probe: 1         # 1=keep nozzle cold (or at idle_temp) during mesh to avoid oozing
variable_idle_temp: 150        # idle temp used during mesh when cold_probe=1 (0 = stay cold)
# Small anti-ooze retracts to clean up stringing around purge/mesh transitions
variable_pre_mesh_retract: 2.0 # mm retract just before mesh begins (belt-and-suspenders)
variable_post_purge_retract: 0.6

gcode:
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(200)|int %}
  {% set do_mesh       = printer["gcode_macro START_PRINT"].do_mesh|int %}
  {% set do_purge      = printer["gcode_macro START_PRINT"].do_purge|int %}
  {% set cold_probe    = printer["gcode_macro START_PRINT"].cold_probe|int %}
  {% set idle_temp     = printer["gcode_macro START_PRINT"].idle_temp|int %}
  {% set pre_retract   = printer["gcode_macro START_PRINT"].pre_mesh_retract|float %}
  {% set post_retract  = printer["gcode_macro START_PRINT"].post_purge_retract|float %}

  ; ── Sane modal states ──────────────────────────────────────────────────────
  G21                        ; units = mm
  G90                        ; absolute positioning
  M82                        ; absolute extrusion
  M107                       ; part fan off

  ; ── Temperature handling before mesh ───────────────────────────────────────
  ; We explicitly avoid full heating here to prevent oozing while probing.
  {% if cold_probe == 1 %}
    {% if idle_temp > 0 %}
      M104 S{idle_temp}      ; hold a low "idle" temp during mesh (less ooze than full temp)
    {% else %}
      M104 S0                ; stay cold during mesh
    {% endif %}
  {% else %}
    ; If you ever want "hot probe", uncomment the next line — not recommended for ooze control
    ; M104 S{EXTRUDER_TEMP}  ; start warming early (do not wait)
  {% endif %}

  ; ── Home (BLTouch uses safe_z_home in your config) ─────────────────────────
  G28

  ; ── Optional anti-ooze retract before we start probing moves ──────────────
  ; Helps remove any tiny dribble that may exist even at idle temperature.
  G92 E0
  {% if pre_retract > 0.0 %} G1 E-{ pre_retract } F1800 {% endif %}

  ; ── KAMP adaptive mesh (KAMP overrides BED_MESH_CALIBRATE) ────────────────
  {% if do_mesh == 1 %}
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE
  {% endif %}

  ; ── KAMP Smart Park near print area (keeps nozzle away while finishing heat) ─
  SMART_PARK

  ; ── Now heat to full print temp and wait ───────────────────────────────────
  M104 S{EXTRUDER_TEMP}
  M109 S{EXTRUDER_TEMP}

  ; ── Optional KAMP line purge with tidy exit ────────────────────────────────
  {% if do_purge == 1 %}
    LINE_PURGE

    ; After KAMP’s purge, perform a tiny clean-up to avoid the tail catching:
    {% set ph   = (printer["gcode_macro _KAMP_Settings"].purge_height|default(0.30))|float %}
    {% set hop  = 1.0 %}
    {% set mvx  = 20.0 %}
    {% set mvy  = 20.0 %}
    G92 E0
    {% if post_retract > 0.0 %} G1 E-{ post_retract } F1800 {% endif %}
    G1 Z{ (ph + hop)|round(3) } F1200
    G1 X{ mvx } Y{ mvy } F6000
    G1 E{ post_retract } F150
    G92 E0
  {% endif %}

  M117 Printing...

# END_PRINT: retract, cool, safe park (top-right + bed forward)
[gcode_macro END_PRINT]
description: Cooldown and park (top-right + bed forward)
gcode:
  M107
  M104 S0
  G91
  G1 E-1 F1800
  G90
  _PARK_TR_SAFE
  M84

# Pause/Resume with safe park and optional keep-hot
[gcode_macro PAUSE]
description: Pause with park and fan/heater handling
rename_existing: BASE_PAUSE
gcode:
  {% set keep_hot = params.KEEP_HOT|default(1)|int %}
  BASE_PAUSE
  _SAFE_PARK Z=10
  M106 S0
  {% if not keep_hot %} M104 S0 {% endif %}

[gcode_macro RESUME]
description: Resume and restore state
rename_existing: BASE_RESUME
gcode:
  BASE_RESUME

# CANCEL_PRINT: flush queue, retract, cool, park, then return to UI
[gcode_macro CANCEL_PRINT]
description: Cancel with queue flush, retract, cool down, and safe park
rename_existing: BASE_CANCEL_PRINT
gcode:
  M400
  SDCARD_RESET_FILE
  CLEAR_PAUSE
  SAVE_GCODE_STATE NAME=__canc
  M83
  G1 E-2 F1800
  RESTORE_GCODE_STATE NAME=__canc
  M106 S0
  M104 S0
  _PARK_TR_SAFE
  BASE_CANCEL_PRINT