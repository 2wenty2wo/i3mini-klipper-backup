# ─────────────────────────────────────────────────────────────────────────────
# PRINT LIFECYCLE: start/end, pause/resume, parking, cancel, KAMP toggles
# START_PRINT calls KAMP's BED_MESH_CALIBRATE and LINE_PURGE when enabled.
# ─────────────────────────────────────────────────────────────────────────────

# ─────────────────────────────────────────────────────────────────────────────
# LCD/Console Message Helpers
# Usage:
#   _MSG MSG="Homing..."                 ; shows on LCD + console immediately
#   _MSG MSG="Done" DUR=15               ; show message then auto-clear after 15s
# Notes:
# - M117 drives the printer’s LCD.
# - RESPOND mirrors the same text into the console (Mainsail/Fluidd).
# - _MSG_CLEAR will set LCD to "Ready" only when the printer is idle (so it
#   never overwrites active "Heating/Printing…" messages mid-print).
# ─────────────────────────────────────────────────────────────────────────────
[gcode_macro _MSG]
description: Update LCD (M117) + console, with optional auto-clear timeout
gcode:
  {% set msg = params.MSG|default("") %}
  {% set dur = params.DUR|default(0)|int %}
  M117 {msg}                              ; LCD line
  RESPOND PREFIX=INFO MSG="{msg}"         ; Console pop in Mainsail/Fluidd
  {% if dur > 0 %}
    UPDATE_DELAYED_GCODE ID=_MSG_CLEAR DURATION={dur}
  {% else %}
    # cancel any pending clears (keep current message up)
    UPDATE_DELAYED_GCODE ID=_MSG_CLEAR DURATION=0
  {% endif %}

[delayed_gcode _MSG_CLEAR]
gcode:
  # Only clear if we’re idle; never stomp a live print status
  {% if printer.idle_timeout.state == "Idle" %}
    M117 Ready
  {% endif %}

# Optional: show "Ready" after firmware restarts (once)
[delayed_gcode _MSG_WELCOME]
initial_duration: 1
gcode:
  {% if printer.idle_timeout.state == "Idle" %}
    M117 Ready
  {% endif %}


# Simple KAMP toggles for line purge (mesh toggle is separate var below)
[gcode_macro KAMP_ON]
gcode:
  SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=do_purge VALUE=1
  RESPOND PREFIX=KAMP MSG="Line purge ENABLED. (No change to homing/mesh.)"


[gcode_macro KAMP_OFF]
gcode:
  SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=do_purge VALUE=0
  RESPOND PREFIX=KAMP MSG="Line purge DISABLED. (No change to homing/mesh.)"


# Quick manual park button (front-right)
[gcode_macro PARK]
description: Lift and park front-right
gcode:
  {% if printer.toolhead.homed_axes != "xyz" %} G28 {% endif %}
  G90
  G1 Z20 F6000
  G1 X{printer.toolhead.axis_maximum.x - 5} Y{printer.toolhead.axis_maximum.y - 5} F9000


# Reusable safe park helper (back-right)
[gcode_macro _SAFE_PARK]
description: Lift Z and park back-right safely (fits 120x135 bed)
variable_park_z: 10
gcode:
  {% set parkz = params.Z|default(printer["gcode_macro _SAFE_PARK"].park_z)|int %}
  {% set xmax = printer.configfile.config.stepper_x.position_max|default(120)|int %}
  {% set ymax = printer.configfile.config.stepper_y.position_max|default(135)|int %}
  {% set lift = parkz if parkz > 2 else 2 %}
  SAVE_GCODE_STATE NAME=__park
  G91
  G1 Z{lift} F600
  G90
  G1 X{ x_max|default(xmax) - 5 } Y{ y_max|default(ymax) - 5 } F6000
  RESTORE_GCODE_STATE NAME=__park


# Full-clear safe park (top-right + bed forward)
[gcode_macro _PARK_TR_SAFE]
description: Clamp-safe park: Z to (Zmax-0.5), X/Y to (max - margins), bed forward
variable_x_margin: 2.0
variable_y_margin: 2.0
variable_z_margin: 0.5
gcode:
  {% set x_max = (printer.configfile.config.stepper_x.position_max|default(120))|float %}
  {% set y_max = (printer.configfile.config.stepper_y.position_max|default(135))|float %}
  {% set z_max = (printer.configfile.config.stepper_z.position_max|default(100))|float %}
  {% set xm = (params.X_MARGIN|default(printer["gcode_macro _PARK_TR_SAFE"].x_margin))|float %}
  {% set ym = (params.Y_MARGIN|default(printer["gcode_macro _PARK_TR_SAFE"].y_margin))|float %}
  {% set zm = (params.Z_MARGIN|default(printer["gcode_macro _PARK_TR_SAFE"].z_margin))|float %}
  {% set z_now = printer.toolhead.position.z|float %}
  {% set z_target = (z_max - zm) if (z_max - zm) > z_now else (z_now) %}
  G90
  G1 Z{ z_target|round(3) } F18000
  G1 X{ (x_max - xm)|round(3) } F15000
  G1 Y{ (y_max - ym)|round(3) } F15000


[gcode_macro START_PRINT]
description: Home → mesh → park → heat bed + nozzle → purge
variable_do_mesh: 1
variable_do_purge: 1
variable_cold_probe: 1
variable_idle_temp: 150
gcode:
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(200)|int %}
  {% set BED_TEMP      = params.BED_TEMP|default(60)|int %}
  {% set do_mesh       = printer["gcode_macro START_PRINT"].do_mesh|int %}
  {% set do_purge      = printer["gcode_macro START_PRINT"].do_purge|int %}
  {% set cold_probe    = printer["gcode_macro START_PRINT"].cold_probe|int %}
  {% set idle_temp     = printer["gcode_macro START_PRINT"].idle_temp|int %}

  G21                                 ; mm
  G90                                 ; absolute

  _MSG MSG="Starting..."

  ; --- Optional 'cold probe' preheat for safer probing (kept from your setup)
  {% if cold_probe == 1 %}
    _MSG MSG="Preheating nozzle to {idle_temp}°C"
    M104 S{idle_temp}                 ; warm to idle temp while we home/probe
  {% endif %}

  _MSG MSG="Homing..."
  G28

  ; --- Heat the BED (you were passing BED_TEMP but not using it)
  _MSG MSG="Heating bed to {BED_TEMP}°C"
  M140 S{BED_TEMP}                    ; set bed temp (no wait)
  M190 S{BED_TEMP}                    ; wait for bed

  {% if do_mesh == 1 %}
    _MSG MSG="Meshing bed..."
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE
  {% endif %}

  _MSG MSG="Parking..."
  SMART_PARK

  ; --- Now heat the NOZZLE
  _MSG MSG="Heating nozzle to {EXTRUDER_TEMP}°C"
  M104 S{EXTRUDER_TEMP}
  M109 S{EXTRUDER_TEMP}

  ; --- Optional purge line
  {% if do_purge == 1 %}
    _MSG MSG="Purging..."
    LINE_PURGE
  {% endif %}

  _MSG MSG="Printing..."                ; live print status on LCD/console


# ─────────────────────────────────────────────────────────────
# END_PRINT — tidy finish: retract (if hot), cool everything,
# safe park, release steppers, and update the LCD message.
# ─────────────────────────────────────────────────────────────
[gcode_macro END_PRINT]
description: Cooldown and park (top-right + bed forward)
gcode:
  M400                         ; finish buffered moves
  ; M107                       ; (removed) don't kill the fan immediately

  ; Retract a little ONLY if nozzle is hot enough to legally extrude
  {% set min_ext = printer.configfile.config.extruder.min_extrude_temp|default(170)|int %}
  {% if printer.extruder.temperature >= min_ext %}
    G91
    G1 E-1 F1800               ; small anti-ooze retract
    G90
  {% endif %}

  _PARK_TR_SAFE                ; lift & park back-right + bring bed forward

  ; Heaters OFF (hotend + bed)
  ; You can use TURN_OFF_HEATERS instead of the two lines below if you prefer.
  M104 S0                      ; hotend off
  M140 S0                      ; bed off

  ; Smart part-fan cooldown — keep fan on until hotend < 50°C or 3 min
  COOL_HOTEND_SMART TARGET=50 SPEED=1.0 TIMEOUT=240

  M84                          ; release steppers
  _MSG MSG="Done" DUR=15              ; briefly show, then auto-clear to 'Ready'


# Pause/Resume with safe park and optional keep-hot
[gcode_macro PAUSE]
description: Pause with park and fan/heater handling
rename_existing: BASE_PAUSE
gcode:
  {% set keep_hot = params.KEEP_HOT|default(1)|int %}
  BASE_PAUSE
  _SAFE_PARK Z=10
  M106 S0
  {% if not keep_hot %} M104 S0 {% endif %}


[gcode_macro RESUME]
description: Resume and restore state
rename_existing: BASE_RESUME
gcode:
  BASE_RESUME


# ─────────────────────────────────────────────────────────────
# CANCEL_PRINT — safe cancel for virtual SD prints:
# clears pause, optional retract (if hot), cools bed+hotend,
# parks safely, and updates LCD, then calls the base cancel.
# ─────────────────────────────────────────────────────────────
[gcode_macro CANCEL_PRINT]
description: Cancel with heaters/fan off (smart cooldown), safe park, and clear display
rename_existing: BASE_CANCEL_PRINT
gcode:
  M400
  CLEAR_PAUSE
  SAVE_GCODE_STATE NAME=__canc
  M83

  ; Retract a little ONLY if nozzle is hot enough
  {% set min_ext = printer.configfile.config.extruder.min_extrude_temp|default(170)|int %}
  {% if printer.extruder.temperature >= min_ext %}
    G1 E-2 F1800
  {% endif %}

  RESTORE_GCODE_STATE NAME=__canc

  _PARK_TR_SAFE

  ; Heaters OFF (hotend + bed)
  M104 S0
  M140 S0

  ; Smart cooldown on cancel as well
  COOL_HOTEND_SMART TARGET=50 SPEED=1.0 TIMEOUT=240

  _MSG MSG="Cancelled" DUR=15
  BASE_CANCEL_PRINT


# ─────────────────────────────────────────────────────────────
# KlipperScreen Load/Unload with auto-heat + auto-cool
# Tuned for Wanhao i3 Mini Bowden (~440 mm)
# Defaults: TEMP=205 °C, SPEED=5 mm/s
# Usage from UI/console:
#   LOAD_FILAMENT                 ; heats to 205, gentle load + purge, cools
#   LOAD_FILAMENT TEMP=215 SPEED=6
#   UNLOAD_FILAMENT               ; heats to 205, gentle pre-purge + unload, cools
#   UNLOAD_FILAMENT TEMP=215 SPEED=4
# Notes:
# - SPEED is in mm/s (we clamp 1–10 mm/s to protect the extruder).
# - Moves are relative E only; no Z moves or homing required.
# - Ensure [extruder] has suitable guards, e.g.:
#     max_extrude_only_distance: 600
#     max_extrude_only_velocity: 10
# ─────────────────────────────────────────────────────────────


[gcode_macro LOAD_FILAMENT]
description: Heat nozzle, load filament slowly, purge, then cool
# Distance from extruder to nozzle + a little margin (mm)
variable_load_distance: 480
# Purge once the melt zone is reached (mm)
variable_purge_distance: 25
gcode:
  {% set temp = params.TEMP|default(205)|int %}
  {% set spd  = (params.SPEED|default(5)|float) %}
  {% set spd  = 1.0 if spd < 1.0 else (10.0 if spd > 10.0 else spd) %}  ; clamp 1–10 mm/s
  {% set F_slow = (spd * 60)|int %}                                     ; convert to mm/min
  {% set near = (load_distance - 20)|int %}
  {% if near < 0 %}{% set near = 0 %}{% endif %}

  M117 Heating for load...
  M104 S{temp}                 ; start heating
  M109 S{temp}                 ; wait for temperature

  SAVE_GCODE_STATE NAME=_load  ; preserve state (E mode, etc.)
  G91                          ; relative moves (E)
  G92 E0                       ; zero the extruder
  G1 E{near} F{F_slow}         ; bulk feed close to hotend
  G1 E20 F{ F_slow//2 if F_slow > 120 else F_slow }  ; ease into melt zone slower
  G1 E{purge_distance} F{F_slow} ; purge to establish flow
  G1 E-1 F{F_slow}            ; tiny anti-ooze
  G90                          ; back to absolute
  RESTORE_GCODE_STATE NAME=_load

  M104 S0                      ; cool down hotend
  M117 Filament loaded


[gcode_macro UNLOAD_FILAMENT]
description: Heat nozzle, small purge, then unload slowly, then cool
# How far to pull to fully clear Bowden + gears (mm)
variable_unload_distance: 480
# Tiny push to pack melt before retract (mm)
variable_pre_purge: 5
gcode:
  {% set temp = params.TEMP|default(205)|int %}
  {% set spd  = (params.SPEED|default(5)|float) %}
  {% set spd  = 1.0 if spd < 1.0 else (10.0 if spd > 10.0 else spd) %}  ; clamp 1–10 mm/s
  {% set F_slow = (spd * 60)|int %}                                     ; convert to mm/min

  M117 Heating for unload...
  M104 S{temp}                 ; start heating
  M109 S{temp}                 ; wait for temperature

  SAVE_GCODE_STATE NAME=_unload
  G91                          ; relative moves (E)
  G92 E0                       ; zero the extruder
  G1 E{pre_purge} F{F_slow}    ; tiny purge to shape the tip
  G1 E-{unload_distance} F{F_slow} ; slow full retract through Bowden
  G90                          ; back to absolute
  RESTORE_GCODE_STATE NAME=_unload

  M104 S0                      ; cool down hotend
  M117 Filament unloaded


# ───────────────── SMART HOTEND COOLDOWN (M106/M107 version) ────────────────
# Uses the default [fan] (part cooling). SPEED is 0..1 mapped to M106 0..255.
# ---------------------------------------------------------------------------

[gcode_macro _COOL_STATE]
description: Internal state for smart cooldown (do not call directly)
variable_target: 50           # °C threshold to stop
variable_speed: 0.80          # 0..1 duty during cooldown
variable_timeout_s: 180       # seconds max
variable_elapsed_s: 0
gcode:

[gcode_macro COOL_HOTEND_SMART]
description: Keep part fan on until hotend < TARGET or TIMEOUT (non-blocking)
gcode:
  {% set T_default  = printer["gcode_macro _COOL_STATE"].target|float %}
  {% set S_default  = printer["gcode_macro _COOL_STATE"].speed|float %}
  {% set TO_default = printer["gcode_macro _COOL_STATE"].timeout_s|float %}

  {% set T  = (params.TARGET|default(T_default))|float %}
  {% set SP = (params.SPEED|default(S_default))|float %}
  {% set TO = (params.TIMEOUT|default(TO_default))|float %}

  SET_GCODE_VARIABLE MACRO=_COOL_STATE VARIABLE=target       VALUE={T}
  SET_GCODE_VARIABLE MACRO=_COOL_STATE VARIABLE=speed        VALUE={SP}
  SET_GCODE_VARIABLE MACRO=_COOL_STATE VARIABLE=timeout_s    VALUE={TO}
  SET_GCODE_VARIABLE MACRO=_COOL_STATE VARIABLE=elapsed_s    VALUE=0

  _MSG MSG="Cooling hotend → {T|int}°C"
  M106 S{ (SP*255)|round(0)|int }            ; fan on at requested duty
  UPDATE_DELAYED_GCODE ID=_COOL_TICK DURATION=1.0

[delayed_gcode _COOL_TICK]
initial_duration: 0
gcode:
  {% set Tnow    = printer.extruder.temperature|float %}
  {% set target  = printer["gcode_macro _COOL_STATE"].target|float %}
  {% set speed   = printer["gcode_macro _COOL_STATE"].speed|float %}
  {% set timeout = printer["gcode_macro _COOL_STATE"].timeout_s|float %}
  {% set elapsed = printer["gcode_macro _COOL_STATE"].elapsed_s|float %}

  {% if (Tnow <= target) or (elapsed >= timeout) %}
    M107                                      ; fan off
    _MSG MSG="Cooldown complete" DUR=10
  {% else %}
    M106 S{ (speed*255)|round(0)|int }        ; maintain cooldown duty
    SET_GCODE_VARIABLE MACRO=_COOL_STATE VARIABLE=elapsed_s VALUE={(elapsed + 1)}
    UPDATE_DELAYED_GCODE ID=_COOL_TICK DURATION=1.0
  {% endif %}