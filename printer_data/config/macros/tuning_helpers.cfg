# ─────────────────────────────────────────────────────────────────────────────
# TUNING HELPERS: convenience macros for ADXL sanity + shaper calibration
# ─────────────────────────────────────────────────────────────────────────────

[gcode_macro ADXL_SANITY]
description: Check accelerometer is responding and noise is reasonable
gcode:
  RESPOND PREFIX=ADXL MSG="Querying accelerometer…"
  ACCELEROMETER_QUERY
  MEASURE_AXES_NOISE


[gcode_macro RESO_TUNE]
description: Home, warm nozzle, run SHAPER_CALIBRATE on X/Y, then prompt to SAVE_CONFIG
variable_temp: 200
gcode:
  {% set t = params.TEMP|default(printer["gcode_macro RESO_TUNE"].temp)|int %}
  M117 Resonance tune starting…
  {% if printer.toolhead.homed_axes != "xyz" %} G28 {% endif %}
  M104 S{t}
  M109 S{t}
  G90
  {% set x = printer.toolhead.axis_maximum.x / 2 %}
  {% set y = printer.toolhead.axis_maximum.y / 2 %}
  G1 X{ x|round(1) } Y{ y|round(1) } Z20 F6000
  MEASURE_AXES_NOISE
  SHAPER_CALIBRATE
  M117 Review console output; run SAVE_CONFIG if happy


# ─────────────────────────────────────────────────────────────────────────────
# PRESSURE ADVANCE TUNING — LIVE READOUT (40 mm tower defaults, LCD-safe)
# Usage:
#   PA_TUNE                       ; sweep 0.000 → 0.100 across 40 mm
#   PA_TUNE START=0.0 STEP=0.0025 FACTOR=1  ; explicit
#   PA_TUNE_STOP                  ; stop the live logger (safe anytime)
#
# Add this one-liner at the top of your END_PRINT and CANCEL_PRINT:
#   PA_TUNE_STOP
# ─────────────────────────────────────────────────────────────────────────────

[gcode_macro _PA_STATE]
description: Internal state for PA tuning live display
variable_enabled: 0          # 0/1 flag to run the tick
variable_start: 0.0          # starting PA
variable_step: 0.0025        # PA increase per mm of Z (for 40 mm → 0.1 total)
variable_factor: 1.0         # multiplier on the Z-based step
variable_z0: 0.0             # Z reference when tuning started
variable_last_adv: -999.0    # last displayed PA (prevents spam)
gcode:

[gcode_macro PA_TUNE]
description: Start PA tuning tower with live PA readout
gcode:
  {% set start  = params.START|default(0.0)|float %}
  {% set step   = params.STEP|default(0.0025)|float %}
  {% set factor = params.FACTOR|default(1.0)|float %}
  {% set z_now  = printer.toolhead.position.z|float %}

  # Store state
  SET_GCODE_VARIABLE MACRO=_PA_STATE VARIABLE=enabled    VALUE=1
  SET_GCODE_VARIABLE MACRO=_PA_STATE VARIABLE=start      VALUE={start}
  SET_GCODE_VARIABLE MACRO=_PA_STATE VARIABLE=step       VALUE={step}
  SET_GCODE_VARIABLE MACRO=_PA_STATE VARIABLE=factor     VALUE={factor}
  SET_GCODE_VARIABLE MACRO=_PA_STATE VARIABLE=z0         VALUE={z_now}
  SET_GCODE_VARIABLE MACRO=_PA_STATE VARIABLE=last_adv   VALUE=-999.0

  # Force known starting PA (avoid inheriting an old value)
  SET_PRESSURE_ADVANCE ADVANCE={start}

  # Start the tuning tower sweep (PA will increase with Z)
  TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START={start} STEP={step} FACTOR={factor}

  # Start the live reporter tick
  UPDATE_DELAYED_GCODE ID=_PA_TUNE_TICK DURATION=1.0

  # Feedback (console + LCD)
  {action_respond_info("PA_TUNE: start=%.4f step=%.4f factor=%.3f; z0=%.3f" % (start, step, factor, z_now))}
  SET_DISPLAY_TEXT MSG={ "PA start " ~ (start|round(3)) ~ " step " ~ (step|round(4)) }

[gcode_macro PA_TUNE_STOP]
description: Stop PA tuning live readout
gcode:
  SET_GCODE_VARIABLE MACRO=_PA_STATE VARIABLE=enabled VALUE=0
  UPDATE_DELAYED_GCODE ID=_PA_TUNE_TICK DURATION=0
  {action_respond_info("PA_TUNE: live readout stopped")}
  SET_DISPLAY_TEXT MSG="PA tune stopped"

[delayed_gcode _PA_TUNE_TICK]
gcode:
  {% if printer["gcode_macro _PA_STATE"].enabled|int == 1 %}
    {% set start   = printer["gcode_macro _PA_STATE"].start|float %}
    {% set step    = printer["gcode_macro _PA_STATE"].step|float %}
    {% set factor  = printer["gcode_macro _PA_STATE"].factor|float %}
    {% set z0      = printer["gcode_macro _PA_STATE"].z0|float %}
    {% set last    = printer["gcode_macro _PA_STATE"].last_adv|float %}
    {% set z_now   = printer.toolhead.position.z|float %}
    {% set dz      = z_now - z0 %}
    {% if dz < 0 %}
      {% set dz = 0.0 %}
    {% endif %}

    # Current target PA based on Z height
    {% set adv = start + (step * dz * factor) %}

    # Only announce when PA changes by at least one step (reduces spam)
    {% if (adv - last)|abs >= (step - 1e-6) %}
      SET_GCODE_VARIABLE MACRO=_PA_STATE VARIABLE=last_adv VALUE={adv}
      {action_respond_info("PA live: %.4f at Z=%.2f mm" % (adv, z_now))}
      SET_DISPLAY_TEXT MSG={ "PA " ~ (adv|round(3)) ~ " Z " ~ (z_now|round(1)) }
    {% endif %}

    # Schedule next tick
    UPDATE_DELAYED_GCODE ID=_PA_TUNE_TICK DURATION=1.0
  {% endif %}


[gcode_macro TEST_AREA]
gcode:
  G90
  G1 X0 Y0 F3000
  G1 X{printer.toolhead.axis_maximum.x} Y0 F3000
  G1 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F3000
  G1 X0 Y{printer.toolhead.axis_maximum.y} F3000
  G1 X0 Y0 F3000


# ────────────────────────────────────────────────
# BED_PID_TUNE — convenience macro for bed PID tuning
# Usage:
#   BED_PID_TUNE TARGET=60
#   (default is 60 °C if no TARGET is given)
# ────────────────────────────────────────────────
[gcode_macro BED_PID_TUNE]
description: Run PID calibration on the heated bed at a chosen target temp
gcode:
  {% set target = params.TARGET|default(60)|int %}
  M117 PID tuning bed to {target}°C...
  PID_CALIBRATE HEATER=heater_bed TARGET={target}
  M117 PID tune complete; run SAVE_CONFIG


# ────────────────────────────────────────────────
# HOTEND_PID_TUNE — convenience macro for hotend PID tuning
# Usage:
#   HOTEND_PID_TUNE TARGET=200
#   (default is 200 °C if no TARGET is given)
# ────────────────────────────────────────────────
[gcode_macro HOTEND_PID_TUNE]
description: Run PID calibration on the hotend at a chosen target temp
gcode:
  {% set target = params.TARGET|default(200)|int %}
  M117 PID tuning hotend to {target}°C...
  PID_CALIBRATE HEATER=extruder TARGET={target}
  M117 PID tune complete; run SAVE_CONFIG